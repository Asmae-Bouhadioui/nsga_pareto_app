import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.optimize import minimize
from pymoo.core.problem import Problem
from pymoo.operators.sampling.rnd import FloatRandomSampling
from pymoo.operators.crossover.sbx import SBX
from pymoo.operators.mutation.pm import PM
from pymoo.termination import get_termination
# Configuration de la page en mode large
st.set_page_config(page_title="Dashboard M√©dical", layout="wide")
# ===============================
# üîπ Donn√©es simul√©es du march√©
# ===============================
market_data = pd.DataFrame({
    "Produit": ["Smartphone", "Laptop", "Casque Audio", "Tablette", "Montre Connect√©e"],
    "Prix Moyen": [850, 1200, 150, 500, 250],
    "Zone": ["Europe", "USA", "Asie", "Europe", "Afrique"],
    "Cat√©gorie": ["√âlectronique", "Informatique", "Accessoires", "√âlectronique", "Wearable"],
    "Ventes": [1200, 800, 1500, 600, 400]
})

st.sidebar.header("S√©lectionnez un produit")

# S√©lection du produit
produit_selectionne = st.sidebar.selectbox("Choisissez un produit", market_data["Produit"].unique())

# Filtrage des donn√©es du produit s√©lectionn√©
produit_info = market_data[market_data["Produit"] == produit_selectionne]

# Affichage des informations du produit
st.sidebar.write(f"**üìå Infos March√© pour {produit_selectionne}**")
st.sidebar.write(f"üìä **Prix Moyen :** {produit_info['Prix Moyen'].values[0]} ‚Ç¨")
st.sidebar.write(f"üìç **Zone la plus vendue :** {produit_info['Zone'].values[0]}")
st.sidebar.write(f"üè∑Ô∏è **Cat√©gorie principale :** {produit_info['Cat√©gorie'].values[0]}")
st.sidebar.write(f"üìà **Nombre de ventes :** {produit_info['Ventes'].values[0]} unit√©s")

# ===============================
# üîπ Interface Utilisateur Streamlit
# ===============================
st.title("üìä √âtude de March√© & Optimisation des Prix")

# Cr√©ation des colonnes pour la mise en page
st.header("Optimisation du prix du produit")
# Colonne 1 : Optimisation du prix et affichage des graphiques
if st.button("Optimiser le prix du produit"):
    # D√©finition du probl√®me d'optimisation des prix
    class PricingOptimization(Problem):
        def __init__(self, prix_moyen):
            super().__init__(n_var=1, n_obj=3, n_constr=0, xl=np.array([prix_moyen * 0.5]), xu=np.array([prix_moyen * 1.5]))

        def _evaluate(self, X, out, *args, **kwargs):
            price = X[:, 0]
            cost = 0.6 * price  # Supposition : le co√ªt de production est 60% du prix

            # Fonction de demande : plus le prix est √©lev√©, moins il y a d'acheteurs
            demand = np.maximum(0, 10000 - 5 * price)

            # Objectifs √† optimiser
            revenue = -(price * demand)  # Maximiser le chiffre d'affaires
            profit_margin = -(price - cost)  # Maximiser la marge b√©n√©ficiaire
            customer_satisfaction = np.abs(price - produit_info['Prix Moyen'].values[0])  # Minimiser l'√©cart avec le prix moyen

            out["F"] = np.column_stack([revenue, customer_satisfaction, profit_margin])

    # Ex√©cution de l'optimisation
    problem = PricingOptimization(prix_moyen=produit_info['Prix Moyen'].values[0])
    algorithm = NSGA2(
        pop_size=50,
        sampling=FloatRandomSampling(),
        crossover=SBX(prob=0.9, eta=15),
        mutation=PM(eta=20),
        eliminate_duplicates=True
    )

    res = minimize(problem, algorithm, termination=get_termination("n_gen", 100), seed=1, verbose=False)

    # R√©cup√©ration des solutions du Front de Pareto
    F = res.F

    # üîπ Affichage du Front de Pareto
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=F[:, 0],
        y=F[:, 1],
        mode='markers',
        marker=dict(color=F[:, 2], colorscale='Viridis', size=8, showscale=True),
        name="Solutions optimales"
    ))

    fig.update_layout(
        title=f"Front de Pareto - {produit_selectionne}",
        xaxis_title="Chiffre d'affaires (-)",
        yaxis_title="Insatisfaction client",
        template="plotly_dark"
    )

    st.plotly_chart(fig)

    # ===============================
    # üîπ Statistiques suppl√©mentaires
    # ===============================
        
    # Cr√©ation de colonnes pour les graphiques c√¥te √† c√¥te
    with st.container():
        col1, col2 = st.columns(2)

        # Graphique des ventes par zone g√©ographique
        with col1:
            fig2 = px.bar(market_data, x="Zone", y="Ventes", color="Produit", title="üìç Ventes par Zone G√©ographique")
            st.plotly_chart(fig2, use_container_width=True)  # Permet de prendre toute la largeur disponible

        # Graphique des prix moyens par cat√©gorie
        with col2:
            fig3 = px.bar(market_data, x="Cat√©gorie", y="Prix Moyen", color="Produit", title="üè∑Ô∏è Prix Moyens par Cat√©gorie")
            st.plotly_chart(fig3, use_container_width=True)  # Permet de prendre toute la largeur disponible
